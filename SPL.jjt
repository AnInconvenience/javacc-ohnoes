
options {
	MULTI=true;
	NODE_EXTENDS="MyNode";
	TRACK_TOKENS=true;
	NODE_PREFIX="JAR";
}

PARSER_BEGIN(JarvisParser)

	/** MainClass*/
	public class JarvisParser {

		/**
		 * Returns the root node of the AST.  
		 * It only makes sense to call this after a successful parse. 
		 * @return the root node
		 */
		public Node rootNode() {
			return jjtree.rootNode();
		}  

	}

PARSER_END(JarvisParser)


	SKIP : /* WHITE SPACE */
{
	" "
		| "\t"
		| "\n"
		| "\r"
		| "\f"
}


TOKEN : /* OPERATORS */
{
	< MINUS: "-" >
		| < PLUS : "+" >
		| < MULT : "*" >
		| < DIV : "/" >
		| < EQUALS : "=" >
		| < VALEQUALS : "==" >
		| < NOTEQUALS : "!=" >
		| < GEQUALS : ">=" >
		| < LEQUALS : "<=" >
		| < GREATER : ">" >
		| < LESSER : "<" >
		| < CONCAT : ".." >
		/*
		   | < PEQUALS : "+=" >
		   | < DEQUALS : "/=" >
		   | < MULEQUALS : "*=" >
		   | < MINEQUALS : "-=" >
		 */
}

TOKEN : /*keywords*/
{
	< IF : "if" >
		|< THEN : "then" >
		|< ELIF : "else if">
		|< ELSE : "else">
		|< DO : "do" >
		|< WHILE : "while" >
		|< FOR : "for" >
		|< LP : "(" >
		|< RP : ")" >
		|< ECHO : "echo" >
		|< INIT : "_init :" >
		|< EOL : ";" >
}


TOKEN : /*types names*/
{

	< VARTYPE : "boolean" | "int" | "string" | "char" | "double" >
		|< AFFECT : "<-" >
}

TOKEN : /* LOGICAL OPERATORS */
{
	< AND : "&&" > 
		| < OR : "||" >
}

//String

TOKEN :

{
	< QUOTE : "\"" >
		|
		< #ANYCHAR : ~["\""] >
		|
		< STRING : < QUOTE > (< ANYCHAR >)* < QUOTE > >
}

/**Highest operation*/
void jarvis() #void : { } {
(<INIT> (Block())*  <EOF> )#Jarvis(true)
}
void Block() #void : { }
{
 ("{" (Statement())* "}") #Block(true) 
}

void Statement() #void : { }
{
	(Echo () | Decl () | AssignStatement() <EOL> | IfStatement() | WhileStatement()) 
}

void AssignStatement() #void : { }
{
	Expr()
		(
		 <AFFECT> Expr()#Assign(2)
		)?
}

void Decl() #void : {}
{
	((<VARTYPE>) (Varname())) #Decl(1)
}

/** Echo function*/
void Echo() #void : { } {
	( <ECHO>  Expr() <EOL>) #Echo(1)
}


void IfStatement() #void : { }
{
 (((< IF > "(" Expr() ")" Block()) 
 ((< ELIF > "(" Expr() ")" Block()))*) (( < ELSE > Block() ))?)#IfStatement(true) 
}

void WhileStatement() #void: { }
{
 (< WHILE > "(" Expr() ")" Block())#WhileStatement(2)
}

void Expr() #void:
{}
{
 bool_and_expr()
   (
      (
      < OR > bool_and_expr()#OrNode(2)
      )
   )*
}

void bool_and_expr() #void:
{}
{
  equ_expr()
     (
     	( 
    	 < AND > equ_expr() #AndNode(2)	
	)
     )*
}

void equ_expr() #void:
{}
{
 compar_expr()
   (
       (
       < VALEQUALS > compar_expr() #EQNode(2)
      | < NOTEQUALS > compar_expr() #NENode(2)
       )
   )*
}
void compar_expr() #void :
{}
{
Oper()
  (
      (
		  < GEQUALS > Oper() #GENode(2)
		| < LEQUALS > Oper() #LENode(2)
		| < GREATER > Oper() #GTNode(2)
		| < LESSER  > Oper() #LTNode(2)
      )
  )*
}

/** Operations*/
void Oper() #void : { } {
	OperPri() ((
		<PLUS> OperPri()) #AddOper(2)
		| (<MINUS> OperPri()) #MinOper(2)
		| (<CONCAT> OperPri()) #ConcatOper(2)
	)*

}

/** Operations*/
void OperPri() #void : { } {
	Literal() ((
		 <MULT> Literal()) #MultOper(2)
		| (<DIV> Literal()) #DivOper(2)
	)*
}
void Varname() #void: { Token t; }
{
	t=<VARNAME> {jjtThis.val = t.image;} #VarEval(0)
}

/** A literal. */
void Literal() #void : { Token t; } {
	Varname()
		| t=<STRING> { jjtThis.val = t.image; }#String(0)
		|  (t=<NUMBER> { jjtThis.val = Integer.parseInt(t.image);}) #Int(0)
		|  (t=<DECIMALNUMBER> { jjtThis.val = 
				Double.parseDouble(t.image);}) #Double(0)
		|<LP> Expr() <RP> 
		| (t=< BOOLVAL > {jjtThis.val=Boolean.parseBoolean(t.image);})#Bool(0)
}


TOKEN : /* IDENTIFIERS */
{
		< BOOLVAL : "true" | "false" >
		|
		< VARNAME : (("_")?(<IDENTIFIER>)(("_")?<IDENTIFIER>)*) >
		|
		< IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
		|
		< #LETTER: [ "a"-"z", "A"-"Z" ] >
		|
		< #DIGIT: [ "0"-"9"] >
		|
		< NUMBER: (<DIGIT>)+ >
		|
		< DECIMALNUMBER: ((<NUMBER>)? "." <NUMBER> 
				| <NUMBER> "." (<NUMBER>)?) >
}
TOKEN : /*INTS AND STRINGS*/
{
	< #CONSTANT : (< DIGIT >)+ >

}

SKIP :
{
	"/#" : COMMENTAIRE
}

< COMMENTAIRE > SKIP :
{
	"#/" : DEFAULT
}
< COMMENTAIRE > MORE :
{
	<~[]>
}


SPECIAL_TOKEN :
{
	<SINGLE_LINE_COMMENT: "#" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}

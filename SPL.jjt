
options {
	MULTI=true;
	NODE_EXTENDS="MyNode";
	TRACK_TOKENS=true;
	NODE_PREFIX="JAR";
}

PARSER_BEGIN(JarvisParser)

	/** MainClass*/
	public class JarvisParser {

		/**
		 * Returns the root node of the AST.  
		 * It only makes sense to call this after a successful parse. 
		 * @return the root node
		 */
		public Node rootNode() {
			return jjtree.rootNode();
		}  

	}

PARSER_END(JarvisParser)


	SKIP : /* WHITE SPACE */
{
	" "
		| "\t"
		| "\n"
		| "\r"
		| "\f"
}


TOKEN : /* OPERATORS */
{
	< PLUS : "+" >
		| < MINUS : "-" >
		| < MULT : "*" >
		| < DIV : "/" >
		| < EQUALS : "=" >
		| < VALEQUALS : "==" >
		| < NOTEQUALS : "!=" >
		| < GEQUALS : ">=" >
		| < LEQUALS : "<=" >
		| < GREATER : ">" >
		| < LESSER : "<" >
		| < CONCAT : ".." >
		/*
		   | < PEQUALS : "+=" >
		   | < DEQUALS : "/=" >
		   | < MULEQUALS : "*=" >
		   | < MINEQUALS : "-=" >
		 */
}

TOKEN : /*keywords*/
{
	< IF : "if" >
		|< THEN : "then" >
		|< FI : "fi" >
		|< DO : "do" >
		|< WHILE : "while" >
		|< SEMICOLON : ";" >
		|< FOR : "for" >
		|< LP : "(" >
		|< RP : ")" >
		|< ECHO : "echo" >
}


TOKEN : /*types names*/
{

	< VARTYPE : "boolean" | "int" | "string" | "char" | "double" >
		|< AFFECT : "<-" >
}

TOKEN : /* LOGICAL OPERATORS */
{
	< AND : "&&" > 
		| < OR : "||" >
}

//String

TOKEN :

{
	< QUOTE : "\"" >
		|
		< #ANYCHAR : ~["\""] >
		|
		< STRING : < QUOTE > (< ANYCHAR >)* < QUOTE > >
}




/** An Id. */
void Id() #void :
{
	Token t;
}
{
	t = <IDENTIFIER>  {}
}
/**Highest operation*/
void jarvis() #void : { } {
	((Instr())*  <EOF>) #Jarvis(true)
}

/** Simple Instruction */
void Instr() #void : { } {
(Echo() | Oper()) 
}
/** Operations*/
void Oper() #void : { Token t; } {
	OperPri() ((
		<PLUS> OperPri()) #AddOper(2)
		| (<MINUS> OperPri()) #MinOper(2)
		| (<CONCAT> OperPri()) #ConcatOper(2)
	)*
}
/** Operations*/
void OperPri() #void : { Token t; } {
	Literal() ((
		 <MULT> Literal()) #MultOper(2)
		| (<DIV> Literal()) #DivOper(2)
	)*
}

/** Echo function*/
void Echo() #void : { } {
	( <ECHO> Oper() ) #Echo(1)
}

/** A literal. */
void Literal() #void : { Token t; } {
	<LP> Oper() <RP> 
	| ( t=<STRING> { jjtThis.val = t.image; })#String(0)
		|  (t=<NUMBER> { jjtThis.val = Integer.parseInt(t.image);}) #Int(0)
		|  (t=<DECIMALNUMBER> { jjtThis.val = 
				Double.parseDouble(t.image);}) #Double(0)
}


TOKEN : /* IDENTIFIERS */
{
	 < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
		|
		< #LETTER: [ "a"-"z", "A"-"Z" ] >
		|
		< #DIGIT: [ "0"-"9"] >
		|
		< NUMBER: (<DIGIT>)+ >
		|
		< DECIMALNUMBER: ((<NUMBER>)? "." <NUMBER> 
				| <NUMBER> "." (<NUMBER>)?) >
		| < BOOLVAL : "true" | "false" >
}
TOKEN : /*INTS AND STRINGS*/
{
	< #CONSTANT : (< DIGIT >)+ >

}


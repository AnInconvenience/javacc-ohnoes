/* Generated By:JJTree&JavaCC: Do not edit this line. JarvisParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JarvisParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PLUS = 6;
  /** RegularExpression Id. */
  int MINUS = 7;
  /** RegularExpression Id. */
  int MULTIPLY = 8;
  /** RegularExpression Id. */
  int DIVIDE = 9;
  /** RegularExpression Id. */
  int EQUALS = 10;
  /** RegularExpression Id. */
  int VALEQUALS = 11;
  /** RegularExpression Id. */
  int NOTEQUALS = 12;
  /** RegularExpression Id. */
  int GEQUALS = 13;
  /** RegularExpression Id. */
  int LEQUALS = 14;
  /** RegularExpression Id. */
  int GREATER = 15;
  /** RegularExpression Id. */
  int LESSER = 16;
  /** RegularExpression Id. */
  int AND = 17;
  /** RegularExpression Id. */
  int OR = 18;
  /** RegularExpression Id. */
  int NOT = 19;
  /** RegularExpression Id. */
  int ECHO = 20;
  /** RegularExpression Id. */
  int IF = 21;
  /** RegularExpression Id. */
  int THEN = 22;
  /** RegularExpression Id. */
  int FI = 23;
  /** RegularExpression Id. */
  int DO = 24;
  /** RegularExpression Id. */
  int WHILE = 25;
  /** RegularExpression Id. */
  int SEMICOLON = 26;
  /** RegularExpression Id. */
  int FOR = 27;
  /** RegularExpression Id. */
  int LP = 28;
  /** RegularExpression Id. */
  int RP = 29;
  /** RegularExpression Id. */
  int INT = 30;
  /** RegularExpression Id. */
  int BOOL = 31;
  /** RegularExpression Id. */
  int STRING = 32;
  /** RegularExpression Id. */
  int DOUBLE = 33;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 34;
  /** RegularExpression Id. */
  int DECIMALNUMBER = 35;
  /** RegularExpression Id. */
  int BOOLVAL = 36;
  /** RegularExpression Id. */
  int IDENTIFIER = 37;
  /** RegularExpression Id. */
  int LETTER = 38;
  /** RegularExpression Id. */
  int DIGIT = 39;
  /** RegularExpression Id. */
  int QUOTE = 40;
  /** RegularExpression Id. */
  int ANYCHAR = 41;
  /** RegularExpression Id. */
  int STRINGDECL = 42;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 46;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int COMMENTAIRE = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"=\"",
    "\"==\"",
    "\"!=\"",
    "\">=\"",
    "\"<=\"",
    "\">\"",
    "\"<\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"echo\"",
    "\"if\"",
    "\"then\"",
    "\"fi\"",
    "\"do\"",
    "\"while\"",
    "\";\"",
    "\"for\"",
    "\"(\"",
    "\")\"",
    "\"int\"",
    "\"boolean\"",
    "\"string\"",
    "\"double\"",
    "<INTEGER_LITERAL>",
    "<DECIMALNUMBER>",
    "<BOOLVAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"\\\"\"",
    "<ANYCHAR>",
    "<STRINGDECL>",
    "\"/#\"",
    "\"#/\"",
    "<token of kind 45>",
    "<SINGLE_LINE_COMMENT>",
  };

}
